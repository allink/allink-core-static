// Button sizes
@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
    padding: $padding-vertical $padding-horizontal;
    font-size: $font-size;
    line-height: $line-height;
    border-radius: $border-radius;
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Base Styles

*/

@mixin button-base() {
    @include button-size($padding-base-vertical, $padding-base-horizontal, $font-size-base, $line-height-base, $btn-border-radius-base);
    @include font-btn-default();

    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    // IMPORTANT: Has to be set AFTER the font definition, for we ignore the line-height defined in the font settings of buttons
    border-color: $button-border-color;
    border-style: $button-border-style;
    border-radius: $btn-border-radius-base;
    border-width: $button-border-width;
    line-height: $btn-line-height;
    color: $btn-default-color;
    cursor: pointer;
    display: inline-block;
    margin-bottom: 0; // For input.btn
    padding-top: $btn-padding-top;
    padding-right: $btn-padding-right;
    padding-bottom: $btn-padding-bottom;
    padding-left: $btn-padding-left;
    text-align: center;
    touch-action: manipulation;
    transition: $form-field-transition;
    user-select: none;
    vertical-align: middle;

    &,
    &:active,
    &.active {
        &:focus,
        &.focus {
            @include tab-focus;
        }
    }

    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
        text-decoration: none;
        box-shadow: none;
        outline: none;
    }

    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        cursor: $cursor-disabled;
        opacity: 0.65;
        box-shadow: none;
    }

    &,
    &:link,
    &:visited {
        text-decoration: none;
        box-shadow: none;
        transition: $btn-transition;
    }

    &.btn-sm {
        @include font-btn-small();
        border-radius: $btn-border-radius-small;
    }
    &.btn-lg {
        @include font-btn-large();
        border-radius: $btn-border-radius-large;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Get a specific button variation on the spot

===

How to use:

.some-link {
    @include button-variation('primary');
}

*/

@mixin button-variation($variation: 'default') {
    & {
        background-color: map-deep-get($btn-variations,$variation,'bg');
        color: map-deep-get($btn-variations,$variation,'color');
        @if map-deep-get($btn-variations,$variation,'border') {
            border-top-color: map-deep-get($btn-variations,$variation,'border-top-color');
            border-right-color: map-deep-get($btn-variations,$variation,'border-right-color');
            border-bottom-color: map-deep-get($btn-variations,$variation,'border-bottom-color');
            border-left-color: map-deep-get($btn-variations,$variation,'border-left-color');
        } @else {
            border: none;
        }
    }

    &,
    &:link,
    &:visited {
        color: map-deep-get($btn-variations,$variation,'color');
        // in case there are icons defined with pseude elements, let's give them the same color
        &::before,
        &::after {
            color: map-deep-get($btn-variations,$variation,'color');
        }
    }
    &:hover,
    &:focus,
    &:focus:active,
    &:active,
    &:active:hover,
    .open > &.dropdown-toggle {
        background-color: map-deep-get($btn-variations,$variation,'bg-hover');
        color: map-deep-get($btn-variations,$variation,'color-hover');
        outline: none; // not very good because of accessibility reasons, but the default style looks too ugly.
        @if map-deep-get($btn-variations,$variation,'border-hover') {
            border-top-color: map-deep-get($btn-variations, $variation, 'border-top-color-hover');
            border-right-color: map-deep-get($btn-variations, $variation, 'border-right-color-hover');
            border-bottom-color: map-deep-get($btn-variations, $variation, 'border-bottom-color-hover');
            border-left-color: map-deep-get($btn-variations, $variation, 'border-left-color-hover');
        } @else {
            border: none;
        }

        // in case there are icons defined with pseude elements, let's give them the same color
        &::before,
        &::after {
            color: map-deep-get($btn-variations,$variation,'color-hover');
        }
    }
    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        opacity: 1;
        background-color: map-deep-get($btn-variations,$variation,'bg-disabled');
        color: map-deep-get($btn-variations,$variation,'color-disabled');
        @if map-deep-get($btn-variations,$variation,'border-disabled') {
            border-top-color: map-deep-get($btn-variations, $variation, 'border-top-color-disabled');
            border-right-color: map-deep-get($btn-variations, $variation, 'border-right-color-disabled');
            border-bottom-color: map-deep-get($btn-variations, $variation, 'border-bottom-color-disabled');
            border-left-color: map-deep-get($btn-variations, $variation, 'border-left-color-disabled');
        } @else {
            border: none;
        }
    }

    // Hide Button Mask per default
    .link-text-mask {
        display: none;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Button Mask

Note: some subpixel rendering issues may occur on certain screens (i.e. non-retina)
when hover state has a border: https://www.chenhuijing.com/blog/about-subpxiel-rendering-in-browsers

*/

@mixin button-mask-effect($variation: 'default') {
    display: inline-flex;
    overflow: hidden;
    position: relative;
    border: none;
    padding: 0;

    .link-text {
        border-bottom-color: map-deep-get($btn-variations, $variation, 'border-bottom-color');
        border-left-color: map-deep-get($btn-variations, $variation, 'border-left-color');
        border-top-color: map-deep-get($btn-variations, $variation, 'border-top-color');
        border-right-color: map-deep-get($btn-variations, $variation, 'border-right-color');
        border-style: $button-border-style;
        border-width: $button-border-width;
        padding-bottom: $btn-padding-bottom;
        padding-left: $btn-padding-left;
        padding-right: $btn-padding-right;
        padding-top: $btn-padding-top;
    }

    &:hover,
    &:focus,
    &:focus:active,
    &:active,
    &:active:hover,
    .open > &.dropdown-toggle {
        // overwrite default styles for masking effect
        background-color: map-deep-get($btn-variations,$variation,'bg');
        color: map-deep-get($btn-variations,$variation,'color');
        .link-text-mask,
        .link-text-mask__inner {
            transform: translate(0%, 0%);
        }
    }

    .link-text-mask {
        background-color: map-deep-get($btn-variations,$variation,'bg-hover');
        bottom: 0;
        color: map-deep-get($btn-variations,$variation,'color-hover');
        display: block;
        height: 100%;
        left: 0;
        overflow: hidden;
        position: absolute;
        right: 0;
        top: 0;
        transform: translateY(calc(100% + #{$button-border-width}));
        transition: transform $btn-mask-transition-duration $btn-mask-transition-timing-function;

        @if $btn-mask-transition-direction-starting-point == 'bottom' {
            transform: translateY(calc(100% + #{$button-border-width}));
        }
        @if $btn-mask-transition-direction-starting-point == 'right' {
            transform: translateX(calc(100% + #{$button-border-width}));
        }
        @if $btn-mask-transition-direction-starting-point == 'top' {
            transform: translateY(calc(-100% + #{$button-border-width}));
        }
        @if $btn-mask-transition-direction-starting-point == 'left' {
            transform: translateX(calc(-100% + #{$button-border-width}));
        }

        &__inner {
            align-items: center;
            bottom: 0;
            display: flex;
            height: 100%;
            justify-content: center;
            left: 0;
            position: absolute;
            right: 0;
            transition: inherit;
            z-index: 100;

            border-bottom-color: map-deep-get($btn-variations, $variation, 'border-bottom-color-hover');
            border-left-color: map-deep-get($btn-variations, $variation, 'border-left-color-hover');
            border-top-color: map-deep-get($btn-variations, $variation, 'border-top-color-hover');
            border-right-color: map-deep-get($btn-variations, $variation, 'border-right-color-hover');
            border-style: $button-border-style;
            border-width: $button-border-width;

            @if $btn-mask-transition-direction-starting-point == 'bottom' {
                transform: translateY(calc(-100% - #{$button-border-width}));
            }
            @if $btn-mask-transition-direction-starting-point == 'right' {
                transform: translateX(calc(-100% - #{$button-border-width}));
            }
            @if $btn-mask-transition-direction-starting-point == 'top' {
                transform: translateY(calc(100% - #{$button-border-width}));
            }
            @if $btn-mask-transition-direction-starting-point == 'left' {
                transform: translateX(calc(100% - #{$button-border-width}));
            }
        }
    }
}
