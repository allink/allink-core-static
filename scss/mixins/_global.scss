/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Print: Add print styles on the spot. Easier than to navigate back and forth

===

.example-element {
    color: red;
    @include print() {
        color: green;
    }
}

*/

@mixin print( ) {
    @media print { @content; }
}

// Opacity

@mixin opacity($opacity) {
    opacity: $opacity;
    // IE8 filter
    $opacity-ie: ($opacity * 100);
    filter: alpha(opacity=$opacity-ie);
}


// User select
// For selecting text on the page

@mixin user-select($select) {
    -webkit-user-select: $select;
    -moz-user-select: $select;
    -ms-user-select: $select; // IE10+
    user-select: $select;
}


// WebKit-style focus

@mixin tab-focus() {
    // WebKit-specific. Other browsers will keep their default outline style.
    // (Initially tried to also force default via `outline: initial`,
    // but that seems to erroneously remove the outline in Firefox altogether.)
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}


// Drop shadows
//
// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's
// supported browsers that have box shadow capabilities now support it.

@mixin box-shadow($shadow...) {
    -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
    box-shadow: $shadow;
}


// Reset filters for IE
//
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.

@mixin reset-filter() {
    filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
}


// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
    &:before,
    &:after {
        content: " "; // 1
        display: table; // 2
    }
    &:after {
        clear: both;
    }
}

// Center-align a block level element

@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


// CSS image replacement
//
// Heads up! v3 launched with only `.hide-text()`, but per our pattern for
// mixins being reused as classes with the same name, this doesn't hold up. As
// of v3.0.1 we have added `.text-hide()` and deprecated `.hide-text()`.
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757

// Deprecated as of v3.0.1 (has been removed in v4)
@mixin hide-text() {
    font: 0/0 a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

// New mixin to use as of v3.0.1
@mixin text-hide() {
    @include hide-text;
}


// Fluid sizes mixin for spacings, font-sizes, widths, heights, etc.
// Each spacing must have a min (below 320px) and a max size (above 1760px). In-between in gets calculated fluidly
@mixin fluid-size($size, $property: null, $spacings-map: $spacings-sizes, $spacings-breakpoints: $spacings-breakpoints, $negative: false) {
    $min-breakpoint: map-get($spacings-breakpoints, 'min');
    $max-breakpoint: map-get($spacings-breakpoints, 'max');

    // non-negative default value
    $multiplicand: 1;
    @if $negative == true {
        $multiplicand: -1;
    }

    // Check if spacings-size is a string (i.e. 'spacing-section-1')
    @if type-of($size) == string or type-of($size) == map {
        // if a string get the map of current spacing from $spacings-sizes
        $spacing: map-get($spacings-map, $size);

        // if spacing is already map we don't need to look it up by the spacings-size name and use it directly
        @if type-of($size) == map {
            $spacing: $size;
        }

        $min-spacing: map-get($spacing, 'min');
        @include make-fluid-size($min-spacing, $property);

        // if no max size exists, use min size
        @if map-get($spacing, 'max') {
            $max-spacing: map-get($spacing, 'max');
            $difference: strip-unit($max-spacing - $min-spacing);

            @media (min-width: $min-breakpoint) {
                @include make-fluid-size(calc((#{$min-spacing} + #{$difference} * (100vw - #{$min-breakpoint}) / 100) * #{$multiplicand}), $property);
            }
            @media (min-width: $max-breakpoint) {
                @include make-fluid-size(($max-spacing * $multiplicand), $property);
            }
        }
    }
    // Alternatively use fixed value (i.e. pixel value)
    @else {
        @include make-fluid-size(($size * $multiplicand), $property);
    }
}

// Utility function for mixin spacings-size
@mixin make-fluid-size($spacings-size, $property: 'margin') {
    @if str-index($property, '-') == null and (str-index($property, 'margin') or str-index($property, 'padding')) {
        #{$property}-top: $spacings-size;
        #{$property}-bottom: $spacings-size;
    }
    @else {
        #{$property}: $spacings-size;
    }
}
