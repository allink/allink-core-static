/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Print: Add print styles on the spot. Easier than to navigate back and forth

===

.example-element {
    color: red;
    @include print() {
        color: green;
    }
}

*/


@mixin print( ) {
    @media print { @content; }
}


// WebKit-style focus

@mixin tab-focus() {
    // WebKit-specific. Other browsers will keep their default outline style.
    // (Initially tried to also force default via `outline: initial`,
    // but that seems to erroneously remove the outline in Firefox altogether.)
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}


// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
    &::before,
    &::after {
        content: " "; // 1
        display: table; // 2
    }

    &::after {
        clear: both;
    }
}

// Center-align a block level element

@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


// CSS image replacement
//
// Heads up! v3 launched with only `.hide-text()`, but per our pattern for
// mixins being reused as classes with the same name, this doesn't hold up. As
// of v3.0.1 we have added `.text-hide()` and deprecated `.hide-text()`.
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757

// Deprecated as of v3.0.1 (has been removed in v4)
@mixin hide-text() {
    font: 0/0 a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

// New mixin to use as of v3.0.1
@mixin text-hide() {
    @include hide-text;
}


// Fluid sizes mixin for spacings, font-sizes, widths, heights, etc.
// It can either have a name (i.e. 'y-section-1') or a map (i.e. (min: 1rem, max: 5rem) given. In-between in gets calculated fluidly.
@mixin fluid-size($size, $property, $sizings-map: (), $fluid-breakpoints: $fluid-breakpoints, $negative: false) {
    $min-breakpoint: to-rem(map-get($fluid-breakpoints, 'min'));
    $max-breakpoint: to-rem(map-get($fluid-breakpoints, 'max'));

    // non-negative default value
    $multiplicand: 1;

    @if $negative == true {
        $multiplicand: -1;
    }

    // Check if spacings-size is a string (i.e. 'y-section-1') or a map
    @if type-of($size) == string or type-of($size) == map {
        $sizing: $size;
        $direction: null;

        // if spacing is a string we need to look it up
        @if type-of($size) == string {
            $sizing: inspect($size); // convert if no quotes where used

            // support legacy spacing names with spacing-xx prefix
            @if (str-index($sizing, 'spacing-') == 1 and not index(map-keys($sizings-map), $size)) {
                $size: str-replace($size, 'spacing-', 'y-');
            }

            // get spacing direction from name prefix
            @if (str-index($sizing, 'x-') == 1) {
                $direction: 'x';
            } @else {
                $direction: 'y';
            }

            @if index(map-keys($sizings-map), $size) {
                $sizing: map-get($sizings-map, $size);
            } @else {
                @error 'The spacing #{$size} was not found in map $spacings-sizes.';
            }
        }

        $min-size: to-rem(map-get($sizing, 'min'));

        @include make-fluid-size($min-size * $multiplicand, $property, $direction);

        // if no max size exists, use min size
        @if map-get($sizing, 'max') {
            $max-size: to-rem(map-get($sizing, 'max'));
            $difference: strip-unit($max-size - $min-size);

            @media (min-width: $min-breakpoint) {
                @include make-fluid-size(calc((#{$min-size} + #{$difference} * (100vw - #{$min-breakpoint}) / #{strip-unit($max-breakpoint - $min-breakpoint)}) * #{$multiplicand}), $property, $direction);
            }

            @media (min-width: $max-breakpoint) {
                @include make-fluid-size($max-size * $multiplicand, $property, $direction);
            }
        }
    }
    // Alternatively use fixed value (i.e. pixel value)
    @else {
        @include make-fluid-size(($size * $multiplicand), $property);
    }
}

// Utility function for mixin spacings-size
@mixin make-fluid-size($spacings-size, $property: 'margin', $direction: 'y') {
    @if str-index($property, '-') == null and (str-index($property, 'margin') or str-index($property, 'padding')) {
        @if $direction == 'x' {
            #{$property}-left: $spacings-size;
            #{$property}-right: $spacings-size;
        } @else {
            #{$property}-top: $spacings-size;
            #{$property}-bottom: $spacings-size;
        }
    } @else {
        #{$property}: $spacings-size;
    }
}
