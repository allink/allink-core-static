/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Grid system

Generate semantic grid columns with these mixins.

https://getbootstrap.com/docs/4.3/layout/grid/#sass-mixins

*/

@mixin make-row($gutter: $grid-gutter-width) {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$gutter / 2;
    margin-left: -$gutter / 2;
}

@mixin make-container($gutter: $grid-gutter-width) {
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
    margin-right: auto;
    margin-left: auto;
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: $size / $columns;
    margin-left: if($num == 0, 0, percentage($num));
  }

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-xs) {
        @include make-col($columns);
    }
}
@mixin make-xs-column-offset($columns) {
    @media (min-width: $screen-xs) {
        @include make-col-offset($columns, $columns: $grid-columns);
    }
}
@mixin make-xs-column-push($columns) {
    @media (min-width: $screen-xs) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-xs-column-pull($columns) {
    @media (min-width: $screen-xs) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-sm) {
        @include make-col($columns);
    }
}
@mixin make-sm-column-offset($columns) {
    @media (min-width: $screen-sm) {
        @include make-col-offset($columns, $columns: $grid-columns);
    }
}
@mixin make-sm-column-push($columns) {
    @media (min-width: $screen-sm) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-sm-column-pull($columns) {
    @media (min-width: $screen-sm) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-md) {
        @include make-col($columns);
    }
}
@mixin make-md-column-offset($columns) {
    @media (min-width: $screen-md) {
        @include make-col-offset($columns, $columns: $grid-columns);
    }
}
@mixin make-md-column-push($columns) {
    @media (min-width: $screen-md) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-md-column-pull($columns) {
    @media (min-width: $screen-md) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-lg) {
        @include make-col($columns);
    }
}
@mixin make-lg-column-offset($columns) {
    @media (min-width: $screen-lg) {
        @include make-col-offset($columns, $columns: $grid-columns);
    }
}
@mixin make-lg-column-push($columns) {
    @media (min-width: $screen-lg) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-lg-column-pull($columns) {
    @media (min-width: $screen-lg) {
        right: percentage(($columns / $grid-columns));
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Extends the Bootstrap grid with an XL and XXL breakpoint

*/

// XL
@mixin make-xl-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-xl) {
        @include make-col($columns);
    }
}
@mixin make-xl-column-offset($columns) {
    @media (min-width: $screen-xl) {
        @include make-col-offset($columns, $columns: $grid-columns);
    }
}
@mixin make-xl-column-push($columns) {
    @media (min-width: $screen-xl) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-xl-column-pull($columns) {
    @media (min-width: $screen-xl) {
        right: percentage(($columns / $grid-columns));
    }
}

// XXL
@mixin make-xxl-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-xxl) {
        @include make-col($columns);
    }
}
@mixin make-xxl-column-offset($columns) {
    @media (min-width: $screen-xxl) {
        @include make-col-offset($columns, $columns: $grid-columns);
    }
}
@mixin make-xxl-column-push($columns) {
    @media (min-width: $screen-xxl) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-xxl-column-pull($columns) {
    @media (min-width: $screen-xxl) {
        right: percentage(($columns / $grid-columns));
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Column Padding Tweaks

*/

@mixin column-paddings($grid-gutter-width: $grid-gutter-width) {
    padding-left: ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
}

@mixin make-row-sm-max($gutter: $grid-gutter-width) {
    @include media-breakpoint-down(sm) {
        margin-left: -($gutter/4);
        margin-right: -($gutter/4);
    }
}

@mixin column-padding-sm-max($gutter: $grid-gutter-width) {
    @include media-breakpoint-down(sm) {
        padding-left: $gutter/4 !important;
        padding-right: $gutter/4 !important;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Content Plugin > Simple flexbox mixins to add support for ordering on mobile devices

*/

@mixin content-plugin-col-mobile-flexbox($flex-bp: breakpoint-max(sm)) {
    @media (max-width:$flex-bp) {
        .content-section__col-container-inner {
            flex-direction: column;
        }
    }
}

@mixin content-plugin-col-mobile-flexbox-spacing-fix($flex-bp: breakpoint-max(sm)) {
    @media (max-width:$flex-bp) {
        .content-section__col-container-inner {
            margin-top: -$content-plugin-stacked-col-spacing-xs;
        }
    }
}


