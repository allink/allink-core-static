/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Get z'index value of SASS map

@param Configured SASS map
@return z'index value of matching map item

*/

@function z($layer) {
    // echo warning when key hasn't been found
    @if not map-has-key($z-layers, $layer) {
        @warn "No layer found for `#{$layer}` in $z-layers map. Property omitted.";
    }

    @return map-get($z-layers, $layer);
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Get values of "Multi Level Maps"

Usage:

color: map-deep-get($btn-variations,'default','color');

*/

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }

    @return $map;
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Return black or white, depending a given color

Possible use case:

Dynamically setting a text color dependent
on a defined background

*/

@function get-black-or-white-contrast-color($color) {
    @if (lightness($color) > 50) {
        @return #000; // Lighter background, return dark color
    } @else {
        @return #fff; // Darker background, return light color
    }
}


// utility function to strip the unit from a property value (10px -> 10)
// https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Converts pixel or em values into matching rem values.

Usage:

font-size: to-rem(20px);

*/

@function to-rem($value, $base: 16px) {
    @if (unit($value) == 'em') {
        $value: strip-unit($value) * 1rem;
    }

    @if (unit($value) != 'rem') {
        $value: strip-unit($value) / strip-unit($base) * 1rem;
    }

    @if (strip-unit($value) == 0) {
        $value: 0;
    }

    @return $value;
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Replace `$search` with `$replace` in `$string`

@param {String} $string - Initial string
@param {String} $search - Substring to replace
@param {String} $replace ('') - New value
@return {String} - Updated string

*/

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}
